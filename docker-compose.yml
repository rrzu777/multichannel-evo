version: "3.9"

services:
  postgres:
    # Use Postgres with pgvector extension for Chatwoot AI features
    image: docker.io/pgvector/pgvector:pg14
    container_name: mc_postgres
    env_file:
    - ./env/.postgres.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatwoot -h 127.0.0.1 -d chatwoot_production || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  redis:
    image: docker.io/library/redis:7-alpine
    container_name: mc_redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    networks:
      - internal

  chatwoot_rails:
    image: docker.io/chatwoot/chatwoot:latest
    container_name: mc_chatwoot_rails
    env_file:
      - env/.chatwoot.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "3000:3000"
    volumes:
      - chatwoot_storage:/app/storage
    networks:
      internal:
        aliases: [chatwoot]
    # IMPORTANTE: p√°sale el comando que debe ejecutar rails.sh
    command: ["bundle","exec","rails","s","-p","3000","-b","0.0.0.0"]

  chatwoot_worker:
    image: docker.io/chatwoot/chatwoot:latest
    container_name: mc_chatwoot_worker
    env_file:
      - env/.chatwoot.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - internal
    # El worker ejecuta Sidekiq
    command: ["bundle","exec","sidekiq"]


  evolution-api:
    # Set EVOLUTION_IMAGE in a .env file to override registry/tag
    image: evoapicloud/evolution-api:latest
    container_name: mc_evolution_api
    environment:
      SERVER_TYPE: "http"
      SERVER_PORT: "8080"
      SERVER_URL: "http://multi-evoapi.ddnsfree.com:8080"
      SERVER_SSL__ENABLED: "false"
      LOG__LEVEL: "DEBUG"
  
    env_file:
      - env/.evolution.env
    ports:
      - "3001:8080" # host:container
    volumes:
      - evolution_data:/data
      - ./env/.evolution.env:/evolution/.env:ro
    networks:
      - internal

  evolution-api-local:
    # Build Evolution API from local source to avoid GHCR pulls
    # 1) Clone the upstream repo into ./services/evolution-api
    # 2) Run with profile: `docker compose --profile local-build up -d evolution-api-local`
    build:
      context: ./services/evolution-api
      dockerfile: Dockerfile
    container_name: mc_evolution_api_local
    env_file:
      - env/.evolution.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "3001:8080"
    volumes:
      - evolution_data:/data
    networks:
      - internal
    profiles: ["local-build"]

  flowise:
    image: docker.io/flowiseai/flowise:latest
    container_name: mc_flowise
    env_file:
      - env/.flowise.env
    ports:
      - "3012:3000" # host:container (changed from 3002 to avoid conflict)
    volumes:
      - flowise_data:/root/.flowise
    networks:
      - internal

  bot-gateway:
    build:
      context: ./services/bot-gateway
      dockerfile: Dockerfile
    container_name: mc_bot_gateway
    env_file:
      - env/.botgateway.env
    depends_on:
      chatwoot_rails:
        condition: service_started
      flowise:
        condition: service_started
    ports:
      - "3013:3000"
    networks:
      - internal

volumes:
  pgdata:
  redisdata:
  chatwoot_storage:
  evolution_data:
  flowise_data:

networks:
  internal:
    driver: bridge
